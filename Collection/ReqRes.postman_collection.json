{
	"info": {
		"_postman_id": "f2bfd964-f2e3-42b4-95f7-f44c750f8ce1",
		"name": "ReqRes",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "37860963"
	},
	"item": [
		{
			"name": "Users",
			"item": [
				{
					"name": "Get All User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Test response time\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has correct structure\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    \r",
									"    // Memastikan respons memiliki property utama\r",
									"    pm.expect(responseJson).to.have.property('page');\r",
									"    pm.expect(responseJson).to.have.property('per_page');\r",
									"    pm.expect(responseJson).to.have.property('total');\r",
									"    pm.expect(responseJson).to.have.property('total_pages');\r",
									"    pm.expect(responseJson).to.have.property('data');\r",
									"    pm.expect(responseJson).to.have.property('support');\r",
									"});\r",
									"\r",
									"pm.test(\"Data is an array\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    pm.expect(responseJson.data).to.be.an('array');\r",
									"});\r",
									"\r",
									"pm.test(\"Data berisi property yang sesuai\", function () {\r",
									"    const responseJson = pm.response.json();\r",
									"    responseJson.data.forEach(user => {\r",
									"        pm.expect(user).to.have.property('id');\r",
									"        pm.expect(user).to.have.property('email');\r",
									"        pm.expect(user).to.have.property('first_name');\r",
									"        pm.expect(user).to.have.property('last_name');\r",
									"        pm.expect(user).to.have.property('avatar');\r",
									"    });\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://reqres.in/api/users?page=2",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"users"
							],
							"query": [
								{
									"key": "page",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Single User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"// Test response time\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"User ID is correct\", function () {\r",
									"    const jsonData = pm.response.json().data;\r",
									"    pm.expect(jsonData.id).to.eql(1);       \r",
									"});\r",
									"\r",
									"pm.test(\"Response contains user data\", function () {\r",
									"    const jsonData = pm.response.json().data;\r",
									"    pm.expect(jsonData).to.have.property(\"id\");\r",
									"    pm.expect(jsonData).to.have.property(\"first_name\");\r",
									"    pm.expect(jsonData).to.have.property(\"last_name\")\r",
									"    pm.expect(jsonData).to.have.property(\"email\");\r",
									"    pm.expect(jsonData).to.have.property(\"avatar\");\r",
									"});\r",
									"\r",
									"pm.test(\"User data types are correct\", function () {\r",
									"    const jsonData = pm.response.json().data;\r",
									"    pm.expect(jsonData.id).to.be.a(\"number\");\r",
									"    pm.expect(jsonData.email).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.first_name).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.last_name).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.avatar).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://reqres.in/api/users/1",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"users",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has correct structure\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"id\");\r",
									"    pm.expect(jsonData).to.have.property(\"first_name\");\r",
									"    pm.expect(jsonData).to.have.property(\"email\");\r",
									"    pm.expect(jsonData).to.have.property(\"last_name\");\r",
									"    pm.expect(jsonData).to.have.property(\"createdAt\"); \r",
									"});\r",
									"\r",
									"pm.test(\"Response data types are correct\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.id).to.be.a(\"string\");   \r",
									"    pm.expect(jsonData.email).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.first_name).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.last_name).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.createdAt).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Content-Type is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n        \"email\": \"bruce.wayne@reqres.in\",\r\n        \"first_name\": \"Bruce\",\r\n        \"last_name\": \"Wayne\",\r\n        \"avatar\": \"https://reqres.in/img/faces/1-image.jpg\"\r\n}\r\n\r\n       ",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://reqres.in/api/users",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response has the required fields - name, job, and updatedAt\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('name');\r",
									"    pm.expect(responseData).to.have.property('job');\r",
									"    pm.expect(responseData).to.have.property('updatedAt');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Name and job are non-empty strings\", function () {\r",
									"  const responseData = pm.response.json();\r",
									"  \r",
									"  pm.expect(responseData).to.be.an('object');\r",
									"  pm.expect(responseData.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Name should not be empty\");\r",
									"  pm.expect(responseData.job).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Job should not be empty\");\r",
									"});\r",
									"\r",
									"pm.test(\"Job is in a valid format\", function () {\r",
									"    const responseData = pm.response.json();\r",
									"    \r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData.job).to.be.a('string');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response has the Content-Type header\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.exist;\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Content-Type header value is application/json\", function () {\r",
									"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"morpheus\",\r\n    \"job\": \"Sandman\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://reqres.in/api/users/2",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"users",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Response status code is 204\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(204);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Response time is less than 1000ms\", function () {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(1000);\r",
									"});\r",
									"\r",
									"pm.test(\"Respone body is empty\", function () {\r",
									"    pm.expect(pm.response.text()).to.be.empty;\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://reqres.in/api/users/2",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"users",
								"2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Single Resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response code is 200\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"response containts user data\", function () {\r",
									"    var responseData = pm.response.json();\r",
									"    pm.expect(responseData).to.be.an('object');\r",
									"    pm.expect(responseData).to.have.property('data');\r",
									"    pm.expect(responseData.data).to.be.an('object');\r",
									"    pm.expect(responseData.data).to.have.property('id');\r",
									"    pm.expect(responseData.data).to.have.property('name');\r",
									"    pm.expect(responseData.data).to.have.property('year');\r",
									"    pm.expect(responseData.data).to.have.property('color');\r",
									"    pm.expect(responseData.data).to.have.property('pantone_value');\r",
									"});\r",
									"\r",
									"pm.test(\"content type is json\", function () {\r",
									"     pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://reqres.in/api/unknown/2",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"unknown",
								"2"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Register User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Respone has authentication token\", function () {\r",
									"    var responseBody = pm.response.json();\r",
									"    pm.expect(responseBody).to.be.an('object');\r",
									"    pm.expect(responseBody.token).to.exist.and.to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test(\"Token is a non-empty string\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.token).to.be.a(\"string\").and.to.not.be.empty;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"eve.holt@reqres.in\",\r\n    \"password\": \"pistol\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://reqres.in/api/register",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register User (Unsecsessful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"//Fixed syntax by checking the Content-Type before parsing JSON\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message for missing password\", function () {\r",
									"    if (pm.response.headers.get(\"Content-Type\") === \"application/json\") {\r",
									"        const jsonData = pm.response.json();\r",
									"        pm.expect(jsonData).to.have.property(\"error\");\r",
									"        pm.expect(jsonData.error).to.include(\"Missing email or username\");\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Response has correct error structure\", function () {\r",
									"    if (pm.response.headers.get(\"Content-Type\") === \"application/json\") {\r",
									"        const jsonData = pm.response.json();\r",
									"        pm.expect(jsonData).to.have.property(\"error\");\r",
									"        pm.expect(jsonData.error).to.be.a(\"string\");\r",
									"    }\r",
									"});\r",
									"\r",
									"pm.test(\"Response body is not empty on error\", function () {\r",
									"    if (pm.response.headers.get(\"Content-Type\") === \"application/json\") {\r",
									"        pm.expect(pm.response.text()).to.not.be.empty;\r",
									"    }\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"eve.holt@reqres.in\",\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://reqres.in/api/register",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Respone code is 200 for sucsessful login\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Token is presense in response\", function () {\r",
									"    pm.expect(pm.response.json()).to.be.an('object');\r",
									"    pm.expect(pm.response.json().token).to.exist;\r",
									"});\r",
									"\r",
									"pm.test(\"Token is containt user detail\", function () {\r",
									"     var responseBody = pm.response.json();\r",
									"     pm.expect(responseBody).to.be.an('object');\r",
									"     pm.expect(responseBody.token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Token should not be empty\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\": \"eve.holt@reqres.in\",\r\n    \"password\": \"cityslicka\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://reqres.in/api/login",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login User (Unsecsessful)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response code is 400 for invalid login\", function () {\r",
									"    pm.expect(pm.response.code).to.equal(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Error message for invalid login\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"error\").that.includes(\"Missing email or username\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response has correct error structure\", function () {\r",
									"    const jsonData = pm.response.json();\r",
									"    pm.expect(jsonData).to.have.property(\"error\");\r",
									"    pm.expect(jsonData.error).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"password\": \"cityslicka\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://reqres.in/api/login",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Resource",
			"item": [
				{
					"name": "List Resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"response code is 200\", function () {\r",
									"     pm.expect(pm.response.code).to.equal(200);\r",
									"});\r",
									"\r",
									"pm.test(\"response is array\", function () {\r",
									"     var responseBody = pm.response.json();\r",
									"     pm.expect(responseBody).to.be.an('object');\r",
									"     pm.expect(responseBody.data).to.be.an('array');\r",
									"});\r",
									"\r",
									"pm.test(\"Each user has correct properties\", function () {\r",
									"     var responseJSON = pm.response.json();\r",
									"     pm.expect(responseJSON).to.be.an('object');\r",
									"     \r",
									"     responseJSON.data.forEach((user) => {\r",
									"            pm.expect(user).to.have.property('id');\r",
									"            pm.expect(user).to.have.property('name');\r",
									"            pm.expect(user).to.have.property('year');\r",
									"            pm.expect(user).to.have.property('color');\r",
									"            pm.expect(user).to.have.property('pantone_value');\r",
									"     });\r",
									"});\r",
									"\r",
									"pm.test(\"Response has pagination\", function () {\r",
									"    var responseJSON = pm.response.json();\r",
									"    pm.expect(responseJSON).to.be.an('object');\r",
									"    pm.expect(responseJSON).to.have.property('page');\r",
									"    pm.expect(responseJSON).to.have.property('per_page');\r",
									"    pm.expect(responseJSON).to.have.property('total');\r",
									"    pm.expect(responseJSON).to.have.property('total_pages');\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://reqres.in/api/unknown",
							"protocol": "https",
							"host": [
								"reqres",
								"in"
							],
							"path": [
								"api",
								"unknown"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}